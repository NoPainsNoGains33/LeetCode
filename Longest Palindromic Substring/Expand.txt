class Solution {
public:
    int palindrome (string s, int l, int r){
        while (l >= 0 && r < s.length() && s[l] == s[r]){
            l--;
            r++;
        }
        return r - l - 1;
    }
    string longestPalindrome(string s) {
        int len = s.length();
        if (len == 0)
            return "";
        if (len == 1)
            return s;
        int max_length = 1;
        int start = 0, len1, len2, len_max;
        for (int i = 0; i < len; i++){
            len1 = palindrome (s, i, i);
            len2 = palindrome (s, i, i+1);
            len_max = max (len1, len2);
            if (len_max > max_length){
                max_length = len_max;
                start = i - (len_max % 2? len_max/2: len_max/2-1);
            }
        }
        return s.substr(start, max_length);
    }
};
//O(n^2), O(1) but no idea why memory uses a lot...